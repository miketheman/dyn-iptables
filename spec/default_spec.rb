require 'chefspec'
require_relative '../libraries/iptables_rules.rb'

describe 'iptables::default' do
  let(:lib) {
    double('IptablesRules',
      static_inbound_rules: [
        "-A INPUT -i eth0 -m state --state NEW -p tcp -s 192.168.1.0/24 --dport 22 -j ACCEPT",
      ],
      static_outbound_rules: [
        "-A OUTPUT -p icmp -d 0.0.0.0/0 -j ACCEPT",
      ],
      dynamic_inbound_rules: [
        "-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.13 --dport 80 -j ACCEPT",
        "-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.14 --dport 80 -j ACCEPT",
        "-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.15 --dport 80 -j ACCEPT",
      ],
      dynamic_outbound_rules: [
        "-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.7 --dport 22 -j ACCEPT",
        "-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.6 --dport 22 -j ACCEPT",
        "-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.5 --dport 22 -j ACCEPT",
      ]
      )
  }

  let(:content) {
'# Generated by chef
*filter

:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:LOGACCEPT - [0:0]
:LOGDROP - [0:0]

##############
# LOG
##############

# create your logaccept chain. this appends "iptables accept " to the front of the log entry and then allows the traffic to pass through
-A LOGACCEPT -j LOG --log-prefix "iptables accept " --log-level 6
-A LOGACCEPT -j ACCEPT

# create your logdrop chain. this appends "iptables drop " to the front of every packet and the drops the packets
-A LOGDROP -j LOG --log-prefix "iptables drop " --log-level 6
-A LOGDROP -j DROP

##############
# INBOUND
##############

# accept all loopback connections
-A INPUT -i lo -j ACCEPT

# forward all established connections to the accept chain
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# static inbound
-A INPUT -i eth0 -m state --state NEW -p tcp -s 192.168.1.0/24 --dport 22 -j ACCEPT

# dynamic inbound
-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.13 --dport 80 -j ACCEPT
-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.14 --dport 80 -j ACCEPT
-A INPUT -i eth0 -m state --state NEW -p tcp -s 10.11.12.15 --dport 80 -j ACCEPT

# cleanup rule to send all other traffic to the logdrop chain
-A INPUT -j LOGDROP

##############
# OUTBOUND
##############

# forward all established connections to the accept chain
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# static outbound
-A OUTPUT -p icmp -d 0.0.0.0/0 -j ACCEPT

# dynamic outbound
-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.7 --dport 22 -j ACCEPT
-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.6 --dport 22 -j ACCEPT
-A OUTPUT -m state --state NEW -p tcp -d 10.9.8.5 --dport 22 -j ACCEPT

# cleanup rule to send all other traffic to the logdrop chain
-A OUTPUT -j LOGDROP

COMMIT'
  }

  let(:centos5_run) { ChefSpec::Runner.new(platform: 'centos', version: '5.9' ).converge(described_recipe) }
  let(:centos6_run) { ChefSpec::Runner.new(platform: 'centos', version: '6.4' ).converge(described_recipe) }
  let(:ubuntu_1004_run) { ChefSpec::Runner.new(platform: 'ubuntu', version: '10.04' ).converge(described_recipe) }
  let(:ubuntu_1204_run) { ChefSpec::Runner.new(platform: 'ubuntu', version: '10.04' ).converge(described_recipe) }

  before do
    IptablesRules.stub(:new).and_return(lib)
  end

  it 'persists to /etc/sysconfig/iptables on centos-6' do
    expect(centos6_run).to render_file('/etc/sysconfig/iptables').with_content(content)
  end

  it 'persists to /etc/sysconfig/iptables on centos-5' do
    expect(centos5_run).to render_file('/etc/sysconfig/iptables').with_content(content)
  end

  it 'persists to /etc/iptables.rules on ubuntu-10.04' do
    expect(ubuntu_1004_run).to render_file('/etc/iptables.rules').with_content(content)
  end

  it 'persists to /etc/iptables.rules on ubuntu-12.04' do
    expect(ubuntu_1204_run).to render_file('/etc/iptables.rules').with_content(content)
  end
  
end

